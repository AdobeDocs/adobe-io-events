{"version":3,"file":"component---src-pages-guides-using-aem-aem-key-setup-md-8e19a151c6e1084261e6.js","mappings":"oTAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,oDADR,sDAGA,0OAEO,cAAGC,WAAW,IACjB,KAAQ,iFADL,yCAFP,gFAMA,eACE,GAAM,sCADR,wCAGA,4EAA6D,cAAGA,WAAW,IACvE,KAAQ,8CADiD,WAA7D,MAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,gHAIL,eACE,GAAM,4DADR,6DAGA,iEAAkD,uBAAYA,WAAW,KAAvB,uBAAlD,kDACM,cAAGA,WAAW,IAChB,KAAQ,0EADN,mCAGN,eACE,GAAM,8DADR,+DAGA,uGACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,kGAIL,6EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,gCAIL,gGAAiF,uBAAYA,WAAW,KAAvB,iBAAjF,mBACU,uBAAYA,WAAW,KAAvB,qBADV,sBAIH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/using/aem/aem_key_setup.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-io-events/adobe-io-events/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"jwt-authentication-publicprivate-keys-management\"\n    }}>{`JWT Authentication public/private keys management`}</h1>\n    <p>{`To secure the calls between Adobe I/O Events and AEM, we leverage a JWT exchange token flow.\nThis flow requires the JWT request to be signed, and therefore, requires private-public keys configurations\n(see our `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/developer-console/docs/guides/authentication/JWT/\"\n      }}>{`JWT authentication flow documentation`}</a>{`\nfor more details). This documentation details these configurations steps.`}</p>\n    <h2 {...{\n      \"id\": \"create-your-publicprivate-key-pair\"\n    }}>{`Create your public/private key pair`}</h2>\n    <p>{`To create an RSA private/public certificate pair, use `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.openssl.org/docs/manpages.html\"\n      }}>{`openssl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout private.key -out certificate_pub.crt\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"upload-your-public-key-in-your-adobe-developer-workspace\"\n    }}>{`Upload your public key in your Adobe Developer Workspace`}</h2>\n    <p>{`Upload the public key you generated above (`}<inlineCode parentName=\"p\">{`certificate_pub.crt`}</inlineCode>{`) in your Adobe Developer Workspace,\nsee our `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/developer-console/docs/guides/credentials/\"\n      }}>{`Adobe Developer Console guide`}</a></p>\n    <h2 {...{\n      \"id\": \"convert-your-private-key-in-a-simple-base64-encoded-string\"\n    }}>{`Convert your private key in a simple base64-encoded String`}</h2>\n    <p>{`First, to convert your private key to a PKCS8 format, use the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`openssl pkcs8 -topk8 -inform PEM -outform DER -in private.key -nocrypt > private.pkcs8.key\n`}</code></pre>\n    <p>{`Then, to base 64 encode it, use the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`base64 private.pkcs8.key\n`}</code></pre>\n    <p>{`You will use the resulting (base64 encoded pkcs8 key) string to configure `}<inlineCode parentName=\"p\">{`aem-io-events`}</inlineCode>{`,\nand set its `}<inlineCode parentName=\"p\">{`aio.encoded.pkcs8`}</inlineCode>{` configuration.   `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}