{"version":3,"file":"component---src-pages-guides-journaling-intro-md-e36ccf2daed2f8d4c19f.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,eAEpBA,EAAAA,EAAAA,KAAA,ieAMAA,EAAAA,EAAAA,KAAA,gDACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,mCACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,uEACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,mEACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0HAErBH,EAAAA,EAAAA,KAAA,uDAAiDA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,QAAc,uDAAuDH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,QAAc,qIAExKH,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,2BAAyB,yCAErCH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,KAC9B,KAAQ,oCAAkC,oBAKpD,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/journaling_intro.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/adobe-io-events/adobe-io-events/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"journaling\"\n    }}>{`Journaling`}</h1>\n    <p>{`For enterprise developers, Adobe offers another way to consume events besides webhooks: journaling.\nThe Adobe I/O Events Journaling API enables enterprise integrations to consume events according\nto their own cadence and process them in bulk.\nUnlike webhooks, no additional registration or other configuration is required;\nevery enterprise integration that is registered for events is automatically enabled for journaling.\nJournaling data is retained for 7 days.`}</p>\n    <p>{`Important Takeaways on Journaling:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Stores up to 7 days of history`}</li>\n      <li parentName=\"ul\">{`Can be iterated through from any previous event within the history`}</li>\n      <li parentName=\"ul\">{`Will still receive and store events even if webhook is failing`}</li>\n      <li parentName=\"ul\">{`Useful for fetching events that were missed due to webhook issues or for a pulling mechanism instead of webhook push`}</li>\n    </ul>\n    <p>{`Journaling, in contrast to webhooks, is a `}<em parentName=\"p\">{`pull`}</em>{` model of consuming events, whereas webhooks are a `}<em parentName=\"p\">{`push`}</em>{` model.\nIn journaling your application will issue a series of API calls to pull batches of one or more events from the journal.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./api/journaling_api.md\"\n        }}>{`Get started with the Journaling API`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../support/faq.md#journaling-faq\"\n        }}>{`Journaling FAQ`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}